#!/bin/bash
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color
BOLD='\033[1m'
UNDERLINE='\033[4m'

rm -rf vpc.tf subnet.tf
rm -rf .terraform*
rm -rf ./logs/*
rm -rf bastion*tf
rm -rf general*tf
rm -rf common*tf


cat > variables.tf <<EOF
# ----------------------------------------------------------------------------------
variable username {}
variable tenantid {}
variable Password {}
variable authurl {}
variable Region {}
variable client {}
EOF

echo "============================================================================="
echo " "
echo -e "${GREEN}python 설치되어 있지 않으면 스크립트 종료${NC}"
echo " "
echo "============================================================================="

echo -n "파이썬 확인 중: "
for i in {1..10}; do
  echo -n "█"
  sleep 0.2
done

# Python 실행 명령어 감지
if command -v python3 > /dev/null 2>&1; then
  PYTHON_CMD="python3"
elif command -v python > /dev/null 2>&1; then
  PYTHON_CMD="python"
else
  echo -e "${RED}python 설치 필요${NC}"
  exit 1
fi
echo ""
echo -e "${GREEN}완료!${NC}"
echo ""
read -p "다음으로 넘어 가기 Enter: "

clear

# 사용자 입력 받기
echo "======================================================================================================================="
echo " "
echo -e "${GREEN}nhn 서버 구성 스크립트${NC}"
echo -e "${GREEN}https://docs.nhncloud.com/ko/Compute/Instance/ko/terraform-guide/ 참고${NC}"
echo " "
echo "======================================================================================================================="
echo -e "${BLUE}(ex) thlee, mjwon, eccho): ${NC}"
read -p "NHN Cloud ID 입력 :" user_name
clear

echo "======================================================================================================================="
echo " "
echo -e "${GREEN}NHN Cloud 콘솔의 Compute > Instance > 관리 메뉴에서 API 엔드포인트 설정 버튼을 클릭해 테넌트 ID를 확인합니다.${NC}"
echo " "
echo "======================================================================================================================="
read -p "tenant_id 입력 : " tenant_id
clear

echo "======================================================================================================================="
echo " "
echo -e "${GREEN}API Endpoint 설정 대화 상자에서 저장한 API 비밀번호를 사용합니다.${NC}"
echo -e "${GREEN}API 비밀번호 설정 방법은 사용자 가이드 > Compute > Instance > API 사용 준비를 참고합니다.${NC}"
echo " "
echo "======================================================================================================================="
read -p "password 입력: " password
clear

echo "======================================================================================================================="
echo " "
echo -e "${GREEN}NHN Cloud 신원 서비스 주소를 명시합니다.${NC}"
echo -e "${GREEN}NHN Cloud 콘솔의 Compute > Instance > 관리 메뉴에서 API 엔드포인트 설정 버튼을 클릭해 신원 서비스(identity) URL을 확인합니다.${NC}"
echo " "
echo "======================================================================================================================="
read -p "auth_url 입력: " auth_url
clear

echo "======================================================================================================================="
echo " "
echo -e "${GREEN}NHN Cloud 리소스를 관리할 리전 정보를 입력합니다.${NC}"
echo " "
echo "======================================================================================================================="
echo -e "${BLUE}ex) KR1 판교, KR2 평촌, JP1 일본${NC}"
# 리전 입력받기
while true; do
  read -p "region 입력: " region
  
  # 유효한 리전 체크 (KR1, KR2, JP1만 허용)
  if [[ "$region" == "KR1" || "$region" == "KR2" || "$region" == "JP1" ]]; then
    break
  else
    echo -e "${RED}잘못된 입력입니다. KR1, KR2, JP1 중에서 선택해주세요.${NC}"
  fi
done

clear
## 볼드처리로 변경경
echo "======================================================================================================================="
echo " "
echo -e "${GREEN}입력받은 고객사 명은 모든 자원 이름 앞에 붙게 됩니다.${NC}"
echo -e "${GREEN}ex) ${BOLD}${UNDERLINE}pomia${NC}${GREEN}-vpc-01 ${BOLD}${UNDERLINE}pomia${NC}${GREEN}-private-subnet-01 ${BOLD}${UNDERLINE}pomia${NC}${GREEN}-private-subnet-02${NC}"
echo " "
echo "======================================================================================================================="
read -p "고객사 명을 입력해주세요(자원 생성 시 사용 할 이름): " client
clear

# 변수 파일 생성
cat > variables.tfvars <<EOF
username = "$user_name"
tenantid = "$tenant_id"
Password = "$password"
authurl = "$auth_url"
Region = "$region"
client = "$client"
EOF

text="자격 인증 확인 중..."
$PYTHON_CMD ./python_code/provider.py "$tenant_id" "$user_name" "$password" "$client" "$auth_url" > ./logs/provider.log 2>&1 &
pid=$!  # 백그라운드에서 실행 중인 provider.py 프로세스의 PID 저장

while true; do
    for i in {1..3}; do
        echo -ne "\r$text$(printf '.%.0s' $(seq 1 $i))"
        sleep 0.5
    done

    # provider.py가 종료되었는지 확인
    if ! ps -p $pid > /dev/null; then
        break
    fi
    echo ""  # 로딩이 끝난 후 새로운 줄을 출력
done

# provider.py가 성공적으로 실행되었는지 확인
wait $pid
exit_code=$?

if grep -q "successfully" ./logs/provider.log; then
  echo -e " \n"
  echo -e "${GREEN}자격인증 성공${NC} Saved logs/provider.log"
else
  echo -e " \n"
  echo -e "${RED}자격인증 실패${NC} Saved logs/provider.log"
  exit 1
fi

echo ""
read -p "다음으로 넘어 가기 Enter: "
clear

# VPC 생성 반복문
while true; do
  # 사용자 입력 받기
  echo -e "${GREEN}VPC 이름을 입력해주세요: ${BLUE}ex) ${client}-${UNDERLINE}vpc-01${NC}"
  read -p "$client-" vpc_name
  echo " "
  echo -e "${GREEN}NHN에서 사용 가능 한 VPC 대역대는 아래와 같습니다. 이외에는 불가${NC}"
  echo -e "${BLUE}- 10.0.0.0/8~16${NC}" 
  echo -e "${BLUE}- 172.16.0.0/12~16${NC}" 
  echo -e "${BLUE}- 192.168.0.0/16${NC}"
  echo " "
  read -p "VPC CIDR 대역대 입력: " vpc_cidr
  clear
  
  # 변수 값 설정 파일에 추가
  echo "vpc_cidr = \"$vpc_cidr\"" >> variables.tfvars
  vpc_prefix=$(echo "$vpc_cidr" | cut -d'.' -f1-2)
  # 변수 파일에 추가
  echo "variable vpc_cidr {}" >> variables.tf
  echo " " >> "logs/network_resources.log"
  echo "VPC - Name: $client-$vpc_name | CIDR: $vpc_cidr" >> "logs/network_resources.log"
  echo " " >> "logs/network_resources.log"
  echo "++++++++++++++++++++++++++++++++++++++++++++" >> "logs/network_resources.log"
  echo " " >> "logs/network_resources.log"

  # vpc.tf 파일에 VPC 리소스 추가
  echo 'resource "nhncloud_networking_vpc_v2" "resource-vpc-01" {' >> vpc.tf
  echo "  name   = \"\${var.client}-${vpc_name}\"" >> vpc.tf
  echo "  cidrv4 = var.vpc_cidr" >> vpc.tf
  echo '}' >> vpc.tf

  # Subnet 생성 반복문 시작
  index=1
  while true; do
    # 사용자 입력 받기
    clear
    echo -e "${GREEN}Subnet 이름을 입력해주세요${NC}"
    echo -e "${BLUE}ex) ${client}-${UNDERLINE}public-subnet-0$index ${NC}"
    echo -e "${BLUE}ex) ${client}-${UNDERLINE}private-subnet-0$index ${NC}"
    read -p "$client-" sub_name
    echo -e "${GREEN}Subnet CIDR을 입력해주세요 ${BLUE}ex) $vpc_prefix.$index.0/24 ${NC}" 
    read -p " :" sub_cidr

    # 파일에 서브넷 리소스 추가
    echo "resource \"nhncloud_networking_vpcsubnet_v2\" \"resource-vpcsubnet-$index\" {" >> subnet.tf
    echo "  name   = \"\${var.client}-${sub_name}\"" >> subnet.tf
    echo "  vpc_id = nhncloud_networking_vpc_v2.resource-vpc-01.id" >> subnet.tf
    echo "  cidr   = var.sub_cidr_$index" >> subnet.tf
    echo "}" >> subnet.tf
    echo "" >> subnet.tf

    # 변수 파일에 추가
    #echo "variable sub_name_$index {}" >> variables.tf
    echo "variable sub_cidr_$index {}" >> variables.tf

    # 변수 값 설정 파일에 추가
    #echo "sub_name_$index = \"$sub_name\"" >> variables.tfvars
    echo "sub_cidr_$index = \"$sub_cidr\"" >> variables.tfvars

    echo "Subnet $index - Name: $client-$sub_name | CIDR: $sub_cidr" >> "logs/network_resources.log"

    # 추가 생성 여부 확인
    read -p "추가 서브넷을 생성하시겠습니까? (y | n): " add_more
    if [[ "$add_more" == "yes" || "$add_more" == "y" ]]; then
      echo " " 
    else
      break
    fi

    # 인덱스 증가
    ((index++))
  done

  # 최종 확인 단계
  while true; do
    clear
    echo -e "${GREEN}생성 될 네트워크 리소스 목록:${NC}"
    cat logs/network_resources.log
    echo " "

    read -p "위 리소스를 생성하시겠습니까? (y | n): " create_resources

    if [[ "$create_resources" == "y" || "$create_resources" == "yes" ]]; then
      break 2
    elif [[ "$create_resources" == "n" || "$create_resources" == "no" ]]; then
      echo -e "${RED}리소스 생성을 취소하고 VPC 생성 단계로 돌아갑니다.${NC}"
      
      # logs 파일 삭제리소스 생성을 취소하고 베스천 서버
      rm -f logs/network_resources.log
      rm -f subnet.tf
      rm -f vpc.tf

      # variables.tf: variable v, variable s로 시작하는 구문 삭제
      sed -i '/^variable v/d' variables.tf
      sed -i '/^variable s/d' variables.tf

      # variables.tfvars: vpc, sub로 시작하는 구문 삭제
      sed -i '/^vpc/d' variables.tfvars
      sed -i '/^sub/d' variables.tfvars
      break  # VPC 생성 단계로 돌아감
    else
      echo -e "${RED}잘못된 입력입니다. y 또는 n을 입력해주세요.${NC}"
      sleep 1  # 1초 대기 후 다시 반복
    fi 
  done
done

# 변수 파일 경로 확인
VAR_FILE="./variables.tfvars"

# terraform init 실행
clear
text="terraform init 실행 중..."
echo -n "$text"
terraform init -no-color >> ./logs/terraform_init.log 2>&1 &
pid=$!
while true; do
  for i in {1..3}; do
    echo -ne "\r$text$(printf '.%.0s' $(seq 1 $i))"
    sleep 0.5
  done
  if ! ps -p $pid > /dev/null; then
    break
  fi
done
wait $pid
if [ $? -ne 0 ]; then
  echo -e "${RED}Fail!${NC} Saved logs/terraform_init.log"
  rm -rf logs/network_resources.log
  exit 1
fi
echo -e "${GREEN}OK${NC} Saved logs/terraform_init.log"

# terraform plan 실행
text="terraform plan 실행 중..."
echo -n "$text"
terraform plan -var-file="$VAR_FILE" -no-color >> ./logs/terraform_plan.log 2>&1 &
pid=$!
while true; do
  for i in {1..3}; do
    echo -ne "\r$text$(printf '.%.0s' $(seq 1 $i))"
    sleep 0.5
  done
  if ! ps -p $pid > /dev/null; then
    break
  fi
done
wait $pid
if [ $? -ne 0 ]; then
  echo -e "${RED}Fail!${NC} Saved logs/terraform_plan.log"
  rm -rf logs/network_resources.log
  exit 1
fi
echo -e "${GREEN}OK${NC} Saved logs/terraform_plan.log"

# terraform apply 실행
text="terraform apply 실행 중..."
echo -n "$text"
terraform apply -var-file="$VAR_FILE" --auto-approve -no-color >> ./logs/terraform_apply.log 2>&1 &
pid=$!
while true; do
  for i in {1..3}; do
    echo -ne "\r$text$(printf '.%.0s' $(seq 1 $i))"
    sleep 0.5
  done
  if ! ps -p $pid > /dev/null; then
    break
  fi
done
wait $pid
if [ $? -ne 0 ]; then
  echo -e "${RED}Fail!${NC} Saved logs/terraform_apply.log"
  rm -rf logs/network_resources.log
  exit 1
fi
echo -e "${GREEN}OK${NC} Saved logs/terraform_apply.log"
sleep 2

clear


# 생성된 VPC와 서브넷 정보 출력
echo -e "${GREEN}CREATE RESOURCE${NC}"
echo ""
cat logs/network_resources.log

echo ""
read -p "다음으로 넘어 가기 Enter: "
clear
# 사용자 입력 받기
echo "======================================================================================================================="
echo " "
echo -e "${RED}일본 리전은 생성이 불가능합니다.${NC}"
echo " "
echo "======================================================================================================================="
while true; do
  read -p "Key pair를 생성 하시겠습니까? (yes | no): " create_keypair

  if [[ "$create_keypair" == "yes" || "$create_keypair" == "y" ]]; then
    while true; do
      # Key Pair 이름 입력받기
      clear
      echo -e "${GREEN}key Pair 이름을 입력해주세요: ${BLUE}ex) ${client}-stg-key${NC}"
      read -p "${client}-" keypair_name
      text="키 페어 생성 중..."
      echo -n "$text"

      # Python 스크립트 실행
      $PYTHON_CMD ./python_code/keypair.py "$tenant_id" "$user_name" "$password" "$client" "$region" "$auth_url" "$keypair_name" >> ./logs/keypair.log 2>&1 &
      pid=$!

      # 프로세스 상태 확인
      while true; do
        for i in {1..3}; do
          echo -ne "\r$text$(printf '.%.0s' $(seq 1 $i))"
          sleep 0.5
        done
        if ! ps -p $pid > /dev/null; then
          break
        fi
      done

      wait $pid

      if [ $? -ne 0 ]; then
        echo -e "${RED}Error: Failed to execute keypair.py${NC} Saved logs/keypair.log"
        exit 1
      else
        echo -e "${GREEN}Python script executed successfully${NC} Saved logs/keypair.log"
        echo "Private key saved to ${client}-${keypair_name}.key"
      fi
      mv *.key keyfile/
      # 추가 생성 여부 묻기
      read -p "추가로 Key Pair를 생성하시겠습니까? (yes | no): " continue_create
      if [[ "$continue_create" != "yes" && "$continue_create" != "y" ]]; then
        break 2
      fi
    done
  else
      break 
  fi
done

read -p "다음으로 넘어 가기 Enter: "
clear
# # 베스천 보안그룹 생성 반복문
# while true; do
#   echo -e "${GREEN}베스천 보안그룹 이름을 입력해주세요: ${BLUE}ex) ${client}-bastion-sg-01${NC}"
#   read -p "${client}-" bastion_sg_name

#   # 보안 그룹 파일 생성
#   echo 'resource "nhncloud_networking_secgroup_v2" "resource-sg-01" {' >> bastion_sg.tf
#   echo "  name = \"\${var.client}-${bastion_sg_name}\"" >> bastion_sg.tf
#   echo '}' >> bastion_sg.tf
#   echo "" >> bastion_sg.tf

#   echo -e "bastion_sg - Name: ${BOLD}$client-$bastion_sg_name${NC}" >> logs/bastion_sg.log
#   echo "++++++++++++++++++++++++++++++++++++++++++++" >> logs/bastion_sg.log

#   # 보안 그룹 룰셋 생성 반복문
#   rule_index=1
#   rule_cout=1
#   while true; do
#     clear
#     echo -e "${GREEN}인바운드(ingress), 아웃바운드(egress) 둘 중 하나 선택해주세요.${NC}"
#     read -p " ingress | egress: " bastion_gress
#     read -p " Protocol을 입력해 주세요 (tcp | udp): " bastion_protocol
#     echo -e "${GREEN}Port 최소범위 최대범위 입력해주세요 (단일 포트라면 동일하게 입력).${NC}"
#     read -p " port 최소 범위: " bastion_port_range_min
#     read -p " port 최대 범위: " bastion_port_range_max
#     echo -e "${BLUE}ex) 183.111.170.128/27${NC}"
#     read -p "대상 IP CIDR를 입력 해주세요: " bastion_remote_ip_prefix
#     read -p "비고란 입력: " bastion_description

#     # 보안 그룹 룰셋 파일 작성
#     echo "resource \"nhncloud_networking_secgroup_rule_v2\" \"resource-sg-rule-${rule_index}\" {" >> bastion_sg_rule.tf
#     echo "  direction        = \"${bastion_gress}\"" >> bastion_sg_rule.tf
#     echo "  protocol         = \"${bastion_protocol}\"" >> bastion_sg_rule.tf
#     echo "  port_range_min   = ${bastion_port_range_min}" >> bastion_sg_rule.tf
#     echo "  port_range_max   = ${bastion_port_range_max}" >> bastion_sg_rule.tf
#     echo "  remote_ip_prefix = \"${bastion_remote_ip_prefix}\"" >> bastion_sg_rule.tf
#     echo "  description      = \"${bastion_description}\"" >> bastion_sg_rule.tf
#     echo "  security_group_id = nhncloud_networking_secgroup_v2.resource-sg-01.id" >> bastion_sg_rule.tf
#     echo "}" >> bastion_sg_rule.tf
#     echo "" >> bastion_sg_rule.tf

#     echo "bastion_sg_rule_${rule_cout} - ${bastion_gress}|${bastion_protocol}|${bastion_port_range_min}~${bastion_port_range_max}|${bastion_remote_ip_prefix}|${bastion_description}" >> logs/bastion_sg.log

#     # 추가 룰셋 생성 여부 확인
#     read -p "추가 룰셋을 생성하시겠습니까? (y | n): " add_more
#     if [[ "$add_more" == "y" || "$add_more" == "yes" ]]; then
#       ((index++))
#       ((rule_cout++))
#       ((rule_index++))
#       continue
#     else
#       break
#     fi
#   done

#   # 최종 확인 단계
#   while true; do
#     clear
#     echo -e "${GREEN}생성 될 베스천 룰셋 목록:${NC}"
#     cat logs/bastion_sg.log
#     echo " "
#     echo "y: 일반 보안그룹 생성 단계 진행"
#     echo "n: 베스천 보안그룹 설정 초기화 후 재시작"
#     read -p "옵션을 선택하세요 (y | n): " create_resources
#     if [[ "$create_resources" == "y" || "$create_resources" == "yes" ]]; then
#       break 2
#     elif [[ "$create_resources" == "n" || "$create_resources" == "no" ]]; then
#       echo -e "${RED}리소스 생성을 취소하고 베스천 보안그룹 생성 단계로 돌아갑니다.${NC}"
#       rm -f logs/bastion_sg.log bastion_sg.tf bastion_sg_rule.tf
#       break
#     else
#       echo -e "${RED}잘못된 입력입니다. y 또는 n을 입력해주세요.${NC}"
#       sleep 1
#     fi
#   done
# done

# index=2
# ((rule_index++))
# save_rule_index=${rule_index}

index=1
rule_index=1


# 일반 보안그룹 생성 반복문
while true; do
  clear
  echo -e "${GREEN}보안 그룹 이름을 입력해주세요: ${BLUE}ex) ${client}-stg-01${NC}"
  read -p "$client-" general_sg_name

  # 보안그룹 파일 생성
  echo "resource \"nhncloud_networking_secgroup_v2\" \"resource-sg-${index}\" {" >> general_sg.tf
  echo "  name = \"\${var.client}-${general_sg_name}\"" >> general_sg.tf
  echo "}" >> general_sg.tf
  echo "" >> general_sg.tf
  echo " " >> logs/general_sg.log
  echo -e "general_sg - Name: ${BOLD}$client-$general_sg_name${NC}" >> logs/general_sg.log
  echo "++++++++++++++++++++++++++++++++++++++++++++" >> logs/general_sg.log
  rule_cout=1
  # 룰셋 생성 반복문
  while true; do
    clear
    echo -e "${GREEN}인바운드(ingress), 아웃바운드(egress) 둘 중 하나 선택해주세요.${NC}"
    read -p " ingress | egress: " general_gress
    read -p " Protocol을 입력해주세요 (tcp | udp): " general_protocol
    echo -e "${GREEN}Port 최소범위 최대범위 입력해주세요 (단일 포트라면 동일하게 입력).${NC}"
    read -p " port 최소 범위: " general_port_range_min
    read -p " port 최대 범위: " general_port_range_max
    echo -e "${BLUE}대상 IP CIDR를 입력해주세요 (예: 183.111.170.128/27)${NC}"
    read -p "대상 IP CIDR: " general_remote_ip_prefix
    read -p "비고란 입력: " general_description

    # 룰셋 파일에 추가
    echo "resource \"nhncloud_networking_secgroup_rule_v2\" \"resource-sg-rule-${rule_index}\" {" >> general_sg_rule.tf
    echo "  direction        = \"${general_gress}\"" >> general_sg_rule.tf
    echo "  protocol         = \"${general_protocol}\"" >> general_sg_rule.tf
    echo "  port_range_min   = ${general_port_range_min}" >> general_sg_rule.tf
    echo "  port_range_max   = ${general_port_range_max}" >> general_sg_rule.tf
    echo "  remote_ip_prefix = \"${general_remote_ip_prefix}\"" >> general_sg_rule.tf
    echo "  description      = \"${general_description}\"" >> general_sg_rule.tf
    echo "  security_group_id = nhncloud_networking_secgroup_v2.resource-sg-${index}.id" >> general_sg_rule.tf
    echo "}" >> general_sg_rule.tf
    echo "" >> general_sg_rule.tf

    # 로그에 기록
    echo "general_sg_rule_${rule_cout} - ${general_gress}|${general_protocol}|${general_port_range_min}~${general_port_range_max}|${general_remote_ip_prefix}|${general_description}" >> logs/general_sg.log

    # 추가 룰셋 생성 여부 확인
    read -p "추가 룰셋을 생성하시겠습니까? (y | n): " add_more_rule
    if [[ "$add_more_rule" == "y" || "$add_more_rule" == "yes" ]]; then
      ((rule_index++))
      ((rule_cout++))
      continue
    else
      break
    fi
  done
  # 최종 확인 단계
  echo -e "${GREEN}생성될 보안그룹 및 룰셋 목록:${NC}"
  cat logs/general_sg.log
  echo ""
  echo -e "${GREEN}리소스 생성 옵션을 선택하세요:${NC}"
  echo "  y: 추가 보안그룹 생성"
  echo "  n: 보안그룹 설정 초기화 후 재시작"
  echo "  c: 리소스 생성 완료 및 종료"
  read -p "옵션을 선택하세요 (y | n | c): " create_option
  if [[ "$create_option" == "y" ]]; then
    ((index++))
    ((rule_index++))
    echo "++++++++++++++++++++++++++++++++++++++++++++" >> logs/general_sg.log
  elif [[ "$create_option" == "n" ]]; then
    echo -e "${RED}리소스 생성이 취소되었습니다. 초기화 중...${NC}"
    rm -f logs/general_sg.log general_sg.tf general_sg_rule.tf
    rule_index=${save_rule_index}
    index=2
  elif [[ "$create_option" == "c" ]]; then
    echo -e "${GREEN}리소스 생성을 완료하고 종료합니다.${NC}"
    break
  else
    echo -e "${RED}잘못된 입력입니다. y, n 또는 c를 입력해주세요.${NC}"
    sleep 1
  fi
done

clear
text="terraform init 실행 중..."
echo -n "$text"
terraform init -no-color >> ./logs/terraform_init.log 2>&1 &
pid=$!
while true; do
  for i in {1..3}; do
    echo -ne "\r$text$(printf '.%.0s' $(seq 1 $i))"
    sleep 0.5
  done
  if ! ps -p $pid > /dev/null; then
    break
  fi
done
wait $pid
if [ $? -ne 0 ]; then
  echo -e "${RED}Fail!${NC} Saved logs/terraform_init.log"
  rm -rf logs/general_sg.log
  exit 1
fi
echo -e "${GREEN}OK${NC} Saved logs/terraform_init.log"

# terraform plan 실행
text="terraform plan 실행 중..."
echo -n "$text"
terraform plan -var-file="$VAR_FILE" -no-color >> ./logs/terraform_plan.log 2>&1 &
pid=$!
while true; do
  for i in {1..3}; do
    echo -ne "\r$text$(printf '.%.0s' $(seq 1 $i))"
    sleep 0.5
  done
  if ! ps -p $pid > /dev/null; then
    break
  fi
done
wait $pid
if [ $? -ne 0 ]; then
  echo -e "${RED}Fail!${NC} Saved logs/terraform_plan.log"
  rm -rf logs/general_sg.log
  exit 1
fi
echo -e "${GREEN}OK${NC} Saved logs/terraform_plan.log"

# terraform apply 실행
text="terraform apply 실행 중..."
echo -n "$text"
terraform apply -var-file="$VAR_FILE" --auto-approve -no-color >> ./logs/terraform_apply.log 2>&1 &
pid=$!
while true; do
  for i in {1..3}; do
    echo -ne "\r$text$(printf '.%.0s' $(seq 1 $i))"
    sleep 0.5
  done
  if ! ps -p $pid > /dev/null; then
    break
  fi
done
wait $pid
if [ $? -ne 0 ]; then
  echo -e "${RED}Fail!${NC} Saved logs/terraform_apply.log"
  rm -rf logs/general_sg.log
  exit 1
fi
echo -e "${GREEN}OK${NC} Saved logs/terraform_apply.log"
sleep 2

clear


# 생성된 보안그룹 출력
echo -e "${GREEN}CREATE RESOURCE${NC}"
echo ""
cat logs/general_sg.log

echo ""
read -p "다음으로 넘어 가기 Enter: "
clear

declare -A instance_types=(
  ["1-1"]="t2c1m1"
  ["1-2"]="m2c1m2"
  ["4-8"]="m2c4m8"
  ["8-16"]="m2c8m16"
  ["16-32"]="m2c16m32"
  ["2-2"]="c2c2m2"
  ["2-4"]="m2c2m4"
  ["4-4"]="c2c4m4"
  ["8-8"]="c2c8m8"
  ["16-16"]="c2c16m16"
  ["2-8"]="r2c2m8"
  ["4-16"]="r2c4m16"
  ["4-32"]="r2c4m32"
  ["4-64"]="r2c4m64"
  ["8-32"]="r2c8m32"
  ["8-64"]="r2c8m64"
  ["16-64"]="x1c16m64"
  ["16-128"]="x1c16m128"
  ["32-128"]="x1c32m128"
  ["32-256"]="x1c32m256"
  ["64-256"]="x1c64m256"
)


# 베스천 서버 입력 받기 
while true; do
  boot_index=1
  index=1
  echo -e "${GREEN}베스천 서버 이름을 입력해주세요: ${BLUE}ex) ${client}-bastion-server-01${NC}"
  read -p "${client}-" bastion_server_name
  clear
  $PYTHON_CMD ./python_code/find-keypair.py "$tenant_id" "$user_name" "$password" "$region" "$auth_url" > ./logs/find-keypair.log 2>&1 &
  echo -n "키 페어 목록 확인 중: "
  while kill -0 $! 2>/dev/null; do
    echo -n "█"
    sleep 0.2
  done
  echo -e "\n확인!"
  clear
  cat ./logs/find-keypair.log
  echo " "
  read -p "적용할 키 페어 이름을 입력 해주세요.: " bastion_keypair_name
  clear 
  rm -rf ./logs/find-security-group.log
  $PYTHON_CMD ./python_code/find-security-group.py "$tenant_id" "$user_name" "$password" "$region" "$auth_url" > ./logs/find-security-group.log 2>&1 &
  echo -n "보안그룹 목록 확인 중: "
  while kill -0 $! 2>/dev/null; do
    echo -n "█"
    sleep 0.2
  done
  echo -e "\n확인!"
  clear
  cat ./logs/find-security-group.log
  echo " "
  read -p "적용할 보안그룹 이름을 입력 해주세요.: " bastion_security_group
  clear 


  
    # 입력 반복문 시작
  while true; do
    clear
    # 사용자로부터 vCPU와 메모리 입력 받기
    echo -e "서버 사양을 입력해주세요 ${RED}(숫자만 입력)${NC}:"
    read -p "vCPU 코어 수: " vcpu
    read -p "memory 단위 (GB): " mem

    # 입력값을 키로 변환하여 인스턴스 타입 검색
    key="${vcpu}-${mem}"

    if [[ -n "${instance_types[$key]}" ]]; then
      bastion_instance_type="${instance_types[$key]}"
      echo -e "${GREEN}일치하는 인스턴스 타입을 확인 했습니다.${NC}"
      break  # 일치하는 인스턴스 타입을 찾았으므로 루프 종료
    else
      echo -e "${RED}일치하는 인스턴스 타입이 없습니다. 다시 입력해주세요.${NC}"
    fi
  done
  
  
  $PYTHON_CMD ./python_code/images.py "$tenant_id" "$user_name" "$password" "$region" "$auth_url" > ./logs/images.log 2>&1 &
  echo -n "이미지 ID 확인 중: "
  while kill -0 $! 2>/dev/null; do
    echo -n "█"
    sleep 0.2
  done
  echo -e "\n확인!"
  clear
  cat ./logs/images.log
  echo -e "${GREEN}위에 목록에서 이미지 id를 입력해주세요${NC}"
  read -p " ex)7d4a1584-7df9-4437-9c99-4d97b0e16adb :" bastion_server_id
  clear
  
  echo -e "${GREEN}root 볼륨 type을 입력 해주세요${NC} ${RED}(대문자 입력)${NC}"
  read -p " ex) SSD | HDD :" bastion_server_volume_type
  

  echo -e "${GREEN}root 볼륨 Size를 입력 해주세요 ${NC} ${RED}(숫자만 입력)${NC}"
  read -p " 설정 가능한 사이즈 크기 ( 20 ~ 2000GB ) :" bastion_server_size
  clear
  
  cat ./logs/network_resources.log | grep Subnet | sed 's/Subnet //g'
  echo -e "${GREEN}서버를 생성 할 Network 대역대의 번호를 입력해주세요"
  echo -e " ${RED}${BOLD}첫 번째 숫자 번호만 입력${NC}"
  read -p " :" bastion_subnet_index
  clear


  echo -e "${GREEN}서버 IP를 입력해 주세요."
  echo -e "${BLUE} ex)${vpc_prefix}.1.10${NC}"
  read -p " :" bastion_IP
  
  echo "resource \"nhncloud_networking_port_v2\" \"port_1\" {" >> bastion_port.tf
  echo "  name = \"tf_port_1\"" >> bastion_port.tf
  echo "  network_id = nhncloud_networking_vpc_v2.resource-vpc-01.id" >> bastion_port.tf
  echo "  fixed_ip {" >> bastion_port.tf
  echo "    subnet_id = nhncloud_networking_vpcsubnet_v2.resource-vpcsubnet-${bastion_subnet_index}.id" >> bastion_port.tf
  echo "    ip_address = \"${bastion_IP}\"" >> bastion_port.tf
  echo "  }" >> bastion_port.tf
  echo "}" >> bastion_port.tf


  echo "resource \"nhncloud_compute_instance_v2\" \"tf_instance_01\" {" >> bastion_server.tf
  echo "  name      = \"\${var.client}-${bastion_server_name}\"" >> bastion_server.tf
  echo "  key_pair  = \"${bastion_keypair_name}\"" >> bastion_server.tf
  echo "  flavor_id = data.nhncloud_compute_flavor_v2.${bastion_instance_type}.id" >> bastion_server.tf
  echo "  security_groups = [\"default\", \"${bastion_security_group}\"]" >> bastion_server.tf
  echo "  user_data = \"IyEvYmluL2Jhc2gKbnVtPSQoY2F0IC9ldGMvc3NoL3NzaGRfY29uZmlnIHwgZ3JlcCAtbiAiUG9ydCAyMiIgfCBjdXQgLWQgIjoiIC1mIDEpCnNlZCAtaSAiJHtudW19ZDsiIC9ldGMvc3NoL3NzaGRfY29uZmlnCnNlZCAtaSAiJHtudW19YSBQb3J0IDUwMDIyIiAvZXRjL3NzaC9zc2hkX2NvbmZpZwpzeXN0ZW1jdGwgcmVzdGFydCBzc2hkCg==\"" >> bastion_server.tf
  echo "  network {" >> bastion_server.tf
  echo "    port = nhncloud_networking_port_v2.port_${index}.id" >> bastion_server.tf
  echo "  }" >> bastion_server.tf
  echo "  block_device {" >> bastion_server.tf
  echo "    uuid                  = \"${bastion_server_id}\"" >> bastion_server.tf
  echo "    volume_type           = \"General ${bastion_server_volume_type}\"" >> bastion_server.tf
  echo "    source_type           = \"image\"" >> bastion_server.tf
  echo "    destination_type      = \"volume\"" >> bastion_server.tf
  echo "    boot_index            = 0" >> bastion_server.tf
  echo "    volume_size           = ${bastion_server_size}" >> bastion_server.tf
  echo "    delete_on_termination = true" >> bastion_server.tf
  echo "  }" >> bastion_server.tf
  
  echo -e "[ Bastion_Server ] :" >> logs/bastion_instance.log
  echo "- Name: ${client}-${bastion_server_name}" >> logs/bastion_instance.log
  echo "- Keypair: ${bastion_keypair_name}" >> logs/bastion_instance.log
  echo "- Security group: ${bastion_security_group}" >> logs/bastion_instance.log
  echo "- Instance type: ${vcpu}vCPU ${mem}GB" >> logs/bastion_instance.log
  echo "- Instance image:  $(cat logs/images.log | grep "${bastion_server_id}" | sed "s/id: ${bastion_server_id}, //g")" >> logs/bastion_instance.log
  echo "- Root volume type: ${bastion_server_volume_type}" >> logs/bastion_instance.log
  echo "- Root volume size: ${bastion_server_size} GB" >> logs/bastion_instance.log
  echo "- $(cat logs/network_resources.log | grep "Subnet ${bastion_subnet_index}")" >> logs/bastion_instance.log
  echo "- SSH Port: 50022" >> logs/bastion_instance.log
  echo "- Fixed_ip: ${bastion_IP}" >> logs/bastion_instance.log
  echo " " >> logs/bastion_instance.log



  # 추가 디스크 생성 여부 확인
  while true; do
    echo -e "${GREEN}추가 스토리지를 생성하시겠습니까? (y/n)${NC}"
    read -p " :" add_disk

    if [[ "$add_disk" == "y" ]]; then
      echo -e "${GREEN}추가 스토리지 Volume type을 입력 해주세요${NC} ${RED}(대문자 입력)${NC}"
      read -p " ex)SSD | HDD: " add_volume_type
      echo -e "${GREEN}추가 스토리지 Volume Size를 입력 해주세요 ${NC} ${RED}(숫자만 입력)${NC}"
      read -p " ex)20 ~ 2000GB: " add_volume_size
      clear
      echo "  block_device {" >> bastion_server.tf
      echo "    source_type           = \"blank\"" >> bastion_server.tf
      echo "    volume_type           = \"General ${add_volume_type}\"" >> bastion_server.tf
      echo "    destination_type      = \"volume\"" >> bastion_server.tf
      echo "    boot_index            = ${boot_index}" >> bastion_server.tf
      echo "    volume_size           = ${add_volume_size}" >> bastion_server.tf
      echo "    delete_on_termination = true" >> bastion_server.tf
      echo "  }" >> bastion_server.tf
      
      echo "- ${boot_index} block volume type: ${add_volume_type}" >> logs/bastion_instance.log
      echo "- ${boot_index} block volume size: ${add_volume_size} GB" >> logs/bastion_instance.log
      echo " " >> logs/bastion_instance.log

      ((boot_index++))  # boot_index 증가
      continue  # 추가 입력을 위해 루프 계속
    elif [[ "$add_disk" == "n" ]]; then
      echo "}" >> bastion_server.tf
      break  # 추가 디스크 생성 루프 종료
    else
      echo "${RED}잘못된 입력입니다. y 또는 n을 입력해주세요.${NC}"
    fi
  done

  # 구성 확인
  clear
  
    # 최종 확인 단계
  while true; do
    clear
    echo -e "${GREEN}생성 될 베스천 서버 확인:${NC}"
    cat ./logs/bastion_instance.log
    echo " "
    echo "y: 베스천 서버 생성"
    echo "n: 베스천 서버 재 설정 (돌아가기)"
    read -p "옵션을 선택하세요 (y | n): " create_resources
    if [[ "$create_resources" == "y" || "$create_resources" == "yes" ]]; then
      break 2
    elif [[ "$create_resources" == "n" || "$create_resources" == "no" ]]; then
      echo -e "${RED}리소스 생성을 취소하고 베스천 서버 생성 단계로 돌아갑니다.${NC}"
      rm -f logs/bastion_instance.log bastion_server.tf bastion_port.tf
      clear
      break
    else
      echo -e "${RED}잘못된 입력입니다. y 또는 n을 입력해주세요.${NC}"
      sleep 1
    fi
  done
done

VAR_FILE="./variables.tfvars"

# terraform init 실행
clear
text="terraform init 실행 중..."
echo -n "$text"
terraform init -no-color >> ./logs/terraform_init.log 2>&1 &
pid=$!
while true; do
  for i in {1..3}; do
    echo -ne "\r$text$(printf '.%.0s' $(seq 1 $i))"
    sleep 0.5
  done
  if ! ps -p $pid > /dev/null; then
    break
  fi
done
wait $pid
if [ $? -ne 0 ]; then
  echo -e "${RED}Fail!${NC} Saved logs/terraform_init.log"
  rm -rf logs/bastion_instance.log
  exit 1
fi
echo -e "${GREEN}OK${NC} Saved logs/terraform_init.log"

# terraform plan 실행
text="terraform plan 실행 중..."
echo -n "$text"
terraform plan -var-file="$VAR_FILE" -no-color >> ./logs/terraform_plan.log 2>&1 &
pid=$!
while true; do
  for i in {1..3}; do
    echo -ne "\r$text$(printf '.%.0s' $(seq 1 $i))"
    sleep 0.5
  done
  if ! ps -p $pid > /dev/null; then
    break
  fi
done
wait $pid
if [ $? -ne 0 ]; then
  echo -e "${RED}Fail!${NC} Saved logs/terraform_plan.log"
  rm -rf logs/bastion_instance.log
  exit 1
fi
echo -e "${GREEN}OK${NC} Saved logs/terraform_plan.log"

# terraform apply 실행
text="terraform apply 실행 중..."
echo -n "$text"
terraform apply -var-file="$VAR_FILE" --auto-approve -no-color >> ./logs/terraform_apply.log 2>&1 &
pid=$!
while true; do
  for i in {1..3}; do
    echo -ne "\r$text$(printf '.%.0s' $(seq 1 $i))"
    sleep 0.5
  done
  if ! ps -p $pid > /dev/null; then
    break
  fi
done
wait $pid
if [ $? -ne 0 ]; then
  echo -e "${RED}Fail!${NC} Saved logs/terraform_apply.log"
  rm -rf logs/bastion_instance.log
  exit 1
fi
echo -e "${GREEN}OK${NC} Saved logs/terraform_apply.log"
sleep 2

clear

$PYTHON_CMD ./python_code/connection_securitygroup.py "$tenant_id" "$user_name" "$password" "$region" "$auth_url" "$bastion_server_name" "$bastion_security_group"> ./logs/conneciton_secritygroup.log 2>&1 &
echo -n "서버에 보안 그룹 연결 중: "
while kill -0 $! 2>/dev/null; do
  echo -n "█"
  sleep 0.2
done
echo -e "\n확인!"


clear
# 생성된 VPC와 서브넷 정보 출력
echo -e "${GREEN}CREATE RESOURCE${NC}"
echo ""
cat logs/bastion_instance.log

echo ""
read -p "다음으로 넘어가기: Enter"
clear


echo "#!/bin/bash" >> connection_security_group.sh

server_index=2
# 서버 입력 받기 
while true; do
  clear
  boot_index=1
  echo -e "${GREEN}생성 할 서버 이름을 입력해주세요: ${BLUE}ex) ${client}-stg-01${NC}"
  read -p "${client}-" common_server_name
  clear
  $PYTHON_CMD ./python_code/find-keypair.py "$tenant_id" "$user_name" "$password" "$region" "$auth_url" > ./logs/find-keypair.log 2>&1 &
  echo -n "키 페어 목록 확인 중: "
  while kill -0 $! 2>/dev/null; do
    echo -n "█"
    sleep 0.2
  done
  echo -e "\n확인!"
  clear
  cat ./logs/find-keypair.log
  echo " "
  read -p "적용할 키 페어 이름을 입력 해주세요.: " common_keypair_name
  clear 
  rm -rf ./logs/find-security-group.log
  $PYTHON_CMD ./python_code/find-security-group.py "$tenant_id" "$user_name" "$password" "$region" "$auth_url" > ./logs/find-security-group.log 2>&1 &
  echo -n "보안그룹 목록 확인 중: "
  while kill -0 $! 2>/dev/null; do
    echo -n "█"
    sleep 0.2
  done
  echo -e "\n확인!"
  clear
  cat ./logs/find-security-group.log
  echo " "
  read -p "적용할 보안그룹 이름을 입력 해주세요.: " common_security_group
  clear 


  
    # 입력 반복문 시작
  while true; do
    clear
    # 사용자로부터 vCPU와 메모리 입력 받기
    echo -e "서버 사양을 입력해주세요 ${RED}(숫자만 입력)${NC}:"
    read -p "vCPU 코어 수: " vcpu
    read -p "memory 단위 (GB): " mem

    # 입력값을 키로 변환하여 인스턴스 타입 검색
    key="${vcpu}-${mem}"

    if [[ -n "${instance_types[$key]}" ]]; then
      common_instance_type="${instance_types[$key]}"
      echo -e "${GREEN}일치하는 인스턴스 타입을 확인 했습니다.${NC}"
      break  # 일치하는 인스턴스 타입을 찾았으므로 루프 종료
    else
      echo -e "${RED}일치하는 인스턴스 타입이 없습니다. 다시 입력해주세요.${NC}"
    fi
  done
  
  sleep 0.5
  $PYTHON_CMD ./python_code/images.py "$tenant_id" "$user_name" "$password" "$region" "$auth_url" > ./logs/images.log 2>&1 &
  echo -n "이미지 ID 확인 중: "
  while kill -0 $! 2>/dev/null; do
    echo -n "█"
    sleep 0.2
  done
  echo -e "\n확인!"
  clear
  cat ./logs/images.log
  echo -e "${GREEN}위에 목록에서 이미지 id를 입력해주세요${NC}"
  read -p " ex)7d4a1584-7df9-4437-9c99-4d97b0e16adb :" common_server_id
  clear
  
  echo -e "${GREEN}root 볼륨 type을 입력 해주세요${NC} ${RED}(대문자 입력)${NC}"
  read -p " ex)SSD | HDD :" common_server_volume_type
  

  echo -e "${GREEN}root 볼륨 Size를 입력 해주세요 ${NC} ${RED}(숫자만 입력)${NC}"
  read -p " 설정 가능한 사이즈 크기 (20 ~ 2000GB) :" common_server_size
  clear
  
  cat ./logs/network_resources.log | grep Subnet | sed 's/Subnet //g'
  echo -e "${GREEN}서버를 생성 할 Network 대역대의 번호를 입력해주세요"
  echo -e "${RED}첫 번째 숫자 번호만 입력${NC}"
  read -p " :" common_subnet_index
  clear


  echo -e "${GREEN}서버 IP를 입력해 주세요."
  echo -e "${BLUE} ex)${vpc_prefix}.1.10${NC}"
  read -p " :" common_IP
  
  echo "resource \"nhncloud_networking_port_v2\" \"port_$server_index\" {" >> common_port.tf
  echo "  name = \"tf_port_${server_index}\"" >> common_port.tf
  echo "  network_id = nhncloud_networking_vpc_v2.resource-vpc-01.id" >> common_port.tf
  echo "  fixed_ip {" >> common_port.tf
  echo "    subnet_id = nhncloud_networking_vpcsubnet_v2.resource-vpcsubnet-${common_subnet_index}.id" >> common_port.tf
  echo "    ip_address = \"${common_IP}\"" >> common_port.tf
  echo "  }" >> common_port.tf
  echo "}" >> common_port.tf


  echo "resource \"nhncloud_compute_instance_v2\" \"tf_instance_0${server_index}\" {" >> common_server.tf
  echo "  name      = \"\${var.client}-${common_server_name}\"" >> common_server.tf
  echo "  key_pair  = \"${common_keypair_name}\"" >> common_server.tf
  echo "  flavor_id = data.nhncloud_compute_flavor_v2.${common_instance_type}.id" >> common_server.tf
  echo "  security_groups = [\"default\", \"${common_security_group}\"]" >> common_server.tf
  echo "  network {" >> common_server.tf
  echo "    port = nhncloud_networking_port_v2.port_${server_index}.id" >> common_server.tf
  echo "  }" >> common_server.tf
  echo "  block_device {" >> common_server.tf
  echo "    uuid                  = \"${common_server_id}\"" >> common_server.tf
  echo "    volume_type           = \"General ${common_server_volume_type}\"" >> common_server.tf
  echo "    source_type           = \"image\"" >> common_server.tf
  echo "    destination_type      = \"volume\"" >> common_server.tf
  echo "    boot_index            = 0" >> common_server.tf
  echo "    volume_size           = ${common_server_size}" >> common_server.tf
  echo "    delete_on_termination = true" >> common_server.tf
  echo "  }" >> common_server.tf
  echo "${client}-${common_server_name}: " >> logs/common_instance.log
  echo "- Keypair: ${common_keypair_name}" >> logs/common_instance.log
  echo "- Security group: ${common_security_group}" >> logs/common_instance.log
  echo "- Instance type: ${vcpu}vCPU ${mem}GB" >> logs/common_instance.log
  echo "- Instance image:  $(cat logs/images.log | grep "${common_server_id}" | sed "s/id: ${common_server_id}, //g")" >> logs/common_instance.log
  echo "- Root volume type: ${common_server_volume_type}" >> logs/common_instance.log
  echo "- Root volume size: ${common_server_size} GB" >> logs/common_instance.log
  echo "- $(cat logs/network_resources.log | grep "Subnet ${common_subnet_index}")" >> logs/common_instance.log
  echo "- Fixed_ip: ${common_IP}" >> logs/common_instance.log
  echo " " >> logs/common_instance.log
  echo "$PYTHON_CMD ./python_code/connection_securitygroup.py "$tenant_id" "$user_name" "$password" "$region" "$auth_url" "$common_server_name" "$common_security_group" >> ./logs/conneciton_secritygroup.log 2>&1 &" >> connection_security_group.sh
  echo "pid${server_index}=\$!" >> connection_security_group.sh   
  echo "wait \$pid${server_index}" >> connection_security_group.sh  

  # 추가 디스크 생성 여부 확인
  while true; do
    echo -e "${GREEN}추가 스토리지를 생성하시겠습니까? (y/n)${NC}"
    read -p " :" add_disk

    if [[ "$add_disk" == "y" ]]; then
      echo -e "${GREEN}추가 스토리지 Volume type을 입력 해주세요${NC} ${RED}(대문자 입력)${NC}"
      read -p " ex)SSD | HDD: " add_volume_type
      echo -e "${GREEN}추가 스토리지 Volume Size를 입력 해주세요 ${NC} ${RED}(숫자만 입력)${NC}"
      read -p " ex)20 ~ 2000GB: " add_volume_size
      clear
      echo "  block_device {" >> common_server.tf
      echo "    source_type           = \"blank\"" >> common_server.tf
      echo "    volume_type           = \"General ${add_volume_type}\"" >> common_server.tf
      echo "    destination_type      = \"volume\"" >> common_server.tf
      echo "    boot_index            = ${boot_index}" >> common_server.tf
      echo "    volume_size           = ${add_volume_size}" >> common_server.tf
      echo "    delete_on_termination = true" >> common_server.tf
      echo "  }" >> common_server.tf
      
      echo "- ${boot_index} block volume type: ${add_volume_type}" >> logs/common_instance.log
      echo "- ${boot_index} block volume size: ${add_volume_size} GB" >> logs/common_instance.log
      echo " " >> logs/common_instance.log

      ((boot_index++))  # boot_index 증가
      continue  # 추가 입력을 위해 루프 계속
    elif [[ "$add_disk" == "n" ]]; then
      echo "}" >> common_server.tf
      break  # 추가 디스크 생성 루프 종료
    else
      echo "${RED}잘못된 입력입니다. y 또는 n을 입력해주세요.${NC}"
    fi
  done

  # 구성 확인
  clear
  
    # 최종 확인 단계
  while true; do
    clear
    echo -e "${GREEN}생성 될 베스천 서버 확인:${NC}"
    cat ./logs/common_instance.log
    echo " "
    echo "  y: 추가 서버 생성"
    echo "  n: 설정 값 초기화 (생성 단계로 돌아가기)"
    echo "  c: 서버 생성 진행"
    read -p "옵션을 선택하세요 (y | n | c): " create_option
    if [[ "$create_option" == "y" ]]; then
      ((server_index++))
      echo "++++++++++++++++++++++++++++++++++++++++++++" >> logs/common_instance.log  
      break
    elif [[ "$create_option" == "n" ]]; then
      echo -e "${RED}리소스 생성이 취소되었습니다. 초기화 중...${NC}"
      rm -f logs/common_instance.log.log common_port.tf common_server.tf connection_security_group.sh
      server_index=2
      echo "#!/bin/bash" >> connection_security_group.sh
      break
    elif [[ "$create_option" == "c" ]]; then
      echo -e "${GREEN}리소스 생성을 완료하고 종료합니다.${NC}"
      break 2  
    else
      echo -e "${RED}잘못된 입력입니다. y 또는 n을 입력해주세요.${NC}"
      sleep 1
    fi
  done
done

VAR_FILE="./variables.tfvars"

# terraform init 실행
clear
text="terraform init 실행 중..."
echo -n "$text"
terraform init -no-color >> ./logs/terraform_init.log 2>&1 &
pid=$!
while true; do
  for i in {1..3}; do
    echo -ne "\r$text$(printf '.%.0s' $(seq 1 $i))"
    sleep 0.5
  done
  if ! ps -p $pid > /dev/null; then
    break
  fi
done
wait $pid
if [ $? -ne 0 ]; then
  echo -e "${RED}Fail!${NC} Saved logs/terraform_init.log"
  rm -rf logs/common_instance.log
  exit 1
fi
echo -e "${GREEN}OK${NC} Saved logs/terraform_init.log"

# terraform plan 실행
text="terraform plan 실행 중..."
echo -n "$text"
terraform plan -var-file="$VAR_FILE" -no-color >> ./logs/terraform_plan.log 2>&1 &
pid=$!
while true; do
  for i in {1..3}; do
    echo -ne "\r$text$(printf '.%.0s' $(seq 1 $i))"
    sleep 0.5
  done
  if ! ps -p $pid > /dev/null; then
    break
  fi
done
wait $pid
if [ $? -ne 0 ]; then
  echo -e "${RED}Fail!${NC} Saved logs/terraform_plan.log"
  rm -rf logs/common_instance.log
  exit 1
fi
echo -e "${GREEN}OK${NC} Saved logs/terraform_plan.log"

# terraform apply 실행
text="terraform apply 실행 중..."
echo -n "$text"
terraform apply -var-file="$VAR_FILE" --auto-approve -no-color >> ./logs/terraform_apply.log 2>&1 &
pid=$!
while true; do
  for i in {1..3}; do
    echo -ne "\r$text$(printf '.%.0s' $(seq 1 $i))"
    sleep 0.5
  done
  if ! ps -p $pid > /dev/null; then
    break
  fi
done
wait $pid
if [ $? -ne 0 ]; then
  echo -e "${RED}Fail!${NC} Saved logs/terraform_apply.log"
  rm -rf logs/common_instance.log
  exit 1
fi
echo -e "${GREEN}OK${NC} Saved logs/terraform_apply.log"
sleep 2

clear

./connection_security_group.sh &
echo -n "서버에 보안 그룹 연결 중: "
while kill -0 $! 2>/dev/null; do
  echo -n "█"
  sleep 0.2
done
echo -e "\n확인!"

rm -rf connection_security_group.sh

clear
# 생성된 VPC와 서브넷 정보 출력
echo -e "${GREEN}CREATE RESOURCE${NC}"
echo ""
cat logs/common_instance.log

echo ""
read -p " 종료: Enter"
clear